30/1/2025
  
show databases;

create database VIT;
drop database VIT;

use ViT;
create table CSE(
s_id int,
s_name varchar(30),
s_mark int
);

drop table cse;
show tables from VIT;

select  * from cse;

insert into cse values (1001,'Ram ',99);
insert into cse values (1002,'Shubham',100);
insert into cse values (1003,'Sahil',95);
insert into cse values (1004,'Ishita',98);
insert into cse values (1005,'Vatsal',94);

alter table cse add(
s_contact int
);

desc cse;

alter table cse drop column s_contact;

alter table cse add(
s_country varchar(50) default 'India'
);

insert into cse values (1006,'Shivam Sharma',98,'USA');

------------------------------------------------------------------
31/1/25

create database practicel;

 use practice1;
 create table Mech(s_id int,s_name varchar(25));

 START TRANSACTION;
 insert into Mech values (101, 'jayanth');
 SAVEPOINT A;
 update mech set s_id=102 where s_id=101;

 SAVEPOINT B; 
 insert into Mech values (103, 'Karthick');
 select * from mech;
 savepoint c;
 select*from mech;
 rollback to B;
 select * from mech;
 commit;

------------------------------------------------
1/02/25- 4/02/25

create database practicel;

 use practice1;
 create table Mech(s_id int,s_name varchar(25));

 START TRANSACTION;
 insert into Mech values (101, 'jayanth');
 SAVEPOINT A;
 update mech set s_id=102 where s_id=101;

 SAVEPOINT B; 
 insert into Mech values (103, 'Karthick');
 select * from mech;
 savepoint c;
 select*from mech;
 rollback to B;
 select * from mech;
 commit;
-------------------------------------------------
6/02/25
create database org;

show databases;


use org123;
create table Persons(
ID int NOT NULL,
LastName varchar(255) NOT NULL,
FirstName varchar(255) NOT NULL,
Age int
);

desc persons;
ALTER TABLE Persons
modify AGE INT NOT NULL;

CREATE TABLE Persons1(
ID int Primary key,
LastName varchar(255) NOT NULL unique,
FirstName varchar(255) NOT NULL unique,
Age int
);
desc persons1;
----------------------------------------------------
7/02/25
create database org123;

use org123;

create table category(
c_id int primary key,
c_name varchar(25) not null unique,
c_decrp varchar(250) not null
);


insert into category values (102, 'furnitures','it stores all set of wooden items');

select * from category;
desc category;

CREATE TABLE Products(
P_ID int primary key,
p_Name varchar(250) NOT NULL,
c_id int,
constraint c_id foreign key (c_id)
references category(c_id)
);

desc products;

drop table products;

insert into products values(904,'Wooden table',null);

select * from products;

select* from category;

delete from category where c_id = 101;

drop table category;
--------------------------------------------------------
8/02/25
show databases;
use org123;

create table Student(
sno int primary key,
sname varchar(20),
age int
);

insert into Student(sno,sname,age)
values (1,'Anil',17),
(2,'amna',18),
(3,'Ram',16);

create table Course(
cno int primary key,
cname varchar(20)
);

select from Course;
insert into Course(cno,cname)
values(101,'c'),
(102,'c++'),
(103,'DBMS');

create table Enroll(
sno int,
cno int,
jdate date,
primary key (sno,cno),
foreign key(cno)
	references Course(cno)
	on delete cascade
);

insert into Enroll (sno,cno,jdate)
value (2,105,"2022/05/05");

select * from enroll;
desc enroll;
--------------------------------------------------------
9/02/25
CREATE TABLE Persons{
  ID int NOT NULL,
  LastName varchar(255) NOT NULL,
  FirstName varchar(255),
  Age int,
  CHECK (salary>=200000 and salar <= 400000)
);

ALTER TABLE Persons
ADD CHECK (Age >= 18);

CREATE TABLE Persons1 (
  ID int NOT NULL,
  LastName varchar(255) NOT NULL,
  FirstName varchar(255),
  Age int,
  City varchar(255) DEFAULT 'Coimbatore'
);

desc persons1;

use org123;
show table from org123;

select * from worker;

SELECT * FROM worker WHERE first_name LIKE '_i_a%';

SELECT * FROM worker WHERE salary LIKE '8%';

create view admin_more_salary as
select * from worker 
where departe = 'Admin' and salary >= 100000 order by salary desc;


select * from admin_more_salary;
------------------------------------------------------------------------------
10/02/2025
use org123
select * from worker
select department, count(department) from worker 
where department in ('admin', 'account') group by department;

SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
HAVING condition
ORDER BY column_name(s);

SELECT department, count(department) as highest_head_count
FROM worker
GROUP BY department
HAVING COUNT (department) >= 3;


create table vitBhopal (id int primary key, name varchar(20) not null,
  departement varchar(25) not null);
insert into vitBhopal values(104,'Ishi','cs'),(103,'Anjana','BEd');

create table vit (id int primary key, name varchar(20) not null,
  departement varchar(25) not null);
insert into vit values(104,'Shayna','Delhi'),(103,'Anaya','Vidyapati');

select * from vit;
select * from vitBhopal;

select name as WinnerOfTheYear from vitBhopal 
  where id = (select id from vit where college = 'bhopal');
------------------------------------------------------------------------------------------

11/02/25
use org123;

create table student(
  s_id int primary key,
  s_name varchar(25) not null,
  s_department varchar(25) not null
  );

insert into student values (1001, "Mandy","CSE"),(1002,"Joy","CSE"),(1003,"Wonder","CSE");

select * from student;


create table VIT(
  s_id int primary key,
  s_cgpa varchar(5) not null
  );

insert into vit values (1001,'8.2'),(1003,'8.5'),(1007,'9.5');
select * from vit;

use org123;

select * from student cross join vit;

select * from student INNER JOIN vit where student.s_id = vit.s_id;


select * from student NATURAL JOIN vit where student.s_id = vit.s_id;

select * from student LEFT JOIN vit ON (student.s_id = vit.s_id);

select * from student RIGHT JOIN vit ON (student.s_id = vit.s_id);

select * from student full JOIN vit;

select * from student FULL OUTER JOIN vit ON (student.s_id = vit.s_id);
---------------------------------------------------------------------------------------
12/02/2025
//software installation and task submission
package practice1;

public class Testing1{
  public static void main(String[] args){
    System.out.println("good luck");
  }
}
-------------------------------------------------------------------------------------------
  13/02/25
 //test
-------------------------------------------------------------------------------------------
  14/02/25
import java.sql.*;

public class JDBC{
  public static void main(String[] args){
    try{
      Class.forName("com.mysql.cj.jdbc.Driver");  // Register    // 1
      System.out.println("11111)
      Connection con = DriverManager.getConnection(
        "jdbc:mysql: // localhost:3306 /friday" , "root","root");
      //here sonoo is database name, root is username and password     // 2
      System.out.println("22222");
      Statement stmt = con.createStatement();   // 3
      System.out.println("33333");  
      ResultSet rs = stmt.executeQuery("select * from student");  // 4
  
      while(rs.next())
      System.out.println(rs.getInt(1)+ " " + rs.getString + " " + rs.getString(3);
      }
      con.close();   //5
  
      }
    catch(Exception e){
      System.out.println("Shubham check your program, there is a small error");
    }
  }
}
                      
//sql file
create database friday;
use friday;
show tables from friday;

create table student(id int, name varchar(20), location varchar(20));
insert into student values (101, 'Shivani','Delhi'),(102,'Joy','Kolkata');

select *from student;
-------------------------------------------------------------------------------------------
15/02/2025
//java file
import java.sql.Connection;
import java.sql.DriverManager;
public class CRUD_Test {
  public static void main(String[] args) {
    DB_Connection obj_DB_Connection = new DB_Connection();
    System.out.println(obj_DB_Connection.connection());
  }
  public Connection connection(){
    Connection connection = null;
    try{
      Class.forName("com.mysql.cj.jdbc.Driver");
      connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/saturday","root","root");
    } catch(Exception e){
      System.out.println(e);
    }
    return connection;
//sql file
create database saturday;
use saturday;
create table 'user'(
  'sl_no' INT(5) NULL DEFAULT NULL,
  'name' VARCHAR(100) NULL DEFAULT NULL,
  'email' VARCHAR(100) NULL DEFAULT NULL
);

select * from user;


create Database crud;
use crud;

create table user1(
  sl_no INT NULL DEFAULT NULL,
  name VARCHAR(100) NULL DEFAULT NULL,
  email VARCHAR(100) NULL DEFAULT NULL
  );

select * from user1
------------------------------------------------------------------------------------
17/02/2025
 package CRUD;
import java.sql.Connection;
import java.sql.DriverManager;
public class DB_Connection {
public static void main(String[] args) {
  DB_Connection obj_DB_Connection=new DB_Connection();
  System.out.println(obj_DB_Connection.get_connection());
}
public Connection get_connection(){
 Connection connection=null;
try {
  Class.forName("com.mysql.jdbc.Driver");              
  connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/crud","root", "root");
} catch (Exception e) {
  System.out.println(e);
}
  return connection;
}
}




CRUD_Test.java
package CRUD;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
public class CRUD_Test {

public static void main(String[] args) {
	CRUD_Test objTest=new CRUD_Test();
        //insert data
	objTest.create_data("1", "jinu", "jinu@gmail.com");
	objTest.create_data("2", "jawad", "jawad@gmail.com");
        //read data
	objTest.read_data("2");
        //update data
	objTest.update_data("2", "22", "jawad2", "jawad2@gmail");
        //delete data
	objTest.delete_data("1");
}

public void create_data(String sl_no,String name,String email){
	DB_Connection obj_DB_Connection=new DB_Connection();
	Connection connection=obj_DB_Connection.get_connection();
	PreparedStatement ps=null;
	try {
		String query="insert into user(sl_no,name,email) values (?,?,?)";
		ps=connection.prepareStatement(query);
		ps.setString(1, sl_no);
		ps.setString(2, name);
		ps.setString(3, email);
		System.out.println(ps);
		ps.executeUpdate();
	} catch (Exception e) {
		System.out.println(e);
	}
}

public void read_data(String sl_no){
	DB_Connection obj_DB_Connection=new DB_Connection();
	Connection connection=obj_DB_Connection.get_connection();
	PreparedStatement ps=null;
	ResultSet rs=null;
	try {
		String query="select * from user";
		ps=connection.prepareStatement(query);
		//ps.setString(1, sl_no);
		System.out.println(ps);
		rs=ps.executeQuery();
		while(rs.next()){
		System.out.println("Sl no -"+rs.getString("sl_no"));
		System.out.println("name -"+rs.getString("name"));
		System.out.println("email -"+rs.getString("email"));
		System.out.println("---------------");
		}
	} catch (Exception e) {
		System.out.println(e);
	}
}

public void update_data(String sl_no,String new_sl_no,String name,String email){
	DB_Connection obj_DB_Connection=new DB_Connection();
	Connection connection=obj_DB_Connection.get_connection();
	PreparedStatement ps=null;
	try {
		String query="update user set sl_no=?,name=?,email=? where sl_no=?";
		ps=connection.prepareStatement(query);
		ps.setString(1, new_sl_no);
		ps.setString(2, name);
		ps.setString(3, email);
		ps.setString(4, sl_no);
		System.out.println(ps);
		ps.executeUpdate();
	} catch (Exception e) {
		System.out.println(e);
	}
}

public void delete_data(String sl_no){
	DB_Connection obj_DB_Connection=new DB_Connection();
	Connection connection=obj_DB_Connection.get_connection();
	PreparedStatement ps=null;
	try {
		String query="delete from user where sl_no=?";
		ps=connection.prepareStatement(query);
		ps.setString(1, sl_no);
		System.out.println(ps);
		ps.executeUpdate();
	} catch (Exception e) {
		System.out.println(e);
	}
}
}
-----------------------------------------------------------------------------------------
19/02/2025
  -- commonds of powershel and outputs:
-- show databases
-- admin                  40.00 KiB
-- config                 48.00 KiB
-- local                  96.00 KiB
-- orphanage_management  384.00 KiB
-- test                    8.00 KiB
-- vit                    40.00 KiB
-- use admin
-- switched to db admin
-- use vit
-- switched to db vit
-- show databases
-- admin                  40.00 KiB
-- config                 48.00 KiB
-- local                  96.00 KiB
-- orphanage_management  384.00 KiB
-- test                    8.00 KiB
-- vit                    40.00 KiB


-- Codes
---------------------------------------------------------------------------------
24/02/2025
show databases
admin                  40.00 KiB
config                 72.00 KiB
local                  96.00 KiB
orphanage_management  384.00 KiB
test                    8.00 KiB
vit                    24.00 KiB
use vit
switched to db vit
show databases
admin                  40.00 KiB
config                108.00 KiB
local                  96.00 KiB
orphanage_management  384.00 KiB
test                    8.00 KiB
vit                    24.00 KiB
db
vit
db.dropDatabase
[Function: dropDatabase] AsyncFunction {
  apiVersions: [ 1, Infinity ],
  returnsPromise: true,
  serverVersions: [ '0.0.0', '999.999.999' ],
  topologies: [ 'ReplSet', 'Sharded', 'LoadBalanced', 'Standalone' ],
  returnType: { type: 'unknown', attributes: {} },
  deprecated: false,
  platforms: [ 'Compass', 'Browser', 'CLI' ],
  isDirectShellCommand: false,
  acceptsRawInput: false,
  shellCommandCompleter: undefined,
  help: [Function (anonymous)] Help
}
db.dropDatabase()
{ ok: 1, dropped: 'vit' }
db
vit
use vit
already on db vit
use monday
switched to db monday
db.createCollection("Students")
{ ok: 1 }
db
monday
show collections
Students
db.createCollection("Results")
{ ok: 1 }
show collections
Results
Students
db.Results.drop()
true
show collections
Students
db.Students.insertOne({name:'Shubham V', location:'Samastipur'})
{
  acknowledged: true,
  insertedId: ObjectId('67d9b903726d52f6470e5b75')
}
db.Students.insertOne({name:'Shubham Raj Sharma', location:'Bihar'})
{
  acknowledged: true,
  insertedId: ObjectId('67d9b946726d52f6470e5b76')
}
db.Students.find()
{
  _id: ObjectId('67d9b903726d52f6470e5b75'),
  name: 'Shubham V',
  location: 'Delhi'
}
{
  _id: ObjectId('67d9b946726d52f6470e5b76'),
  name: 'Shivani',
  location: 'Bihar'
}
db.Students.deleteOne({name:'Shubhi'})
{acknowledged: true,
  insertedId: ObjectId('67d9b903726d52f6470e5b75')
}
-----------------------------------------------------------------------------------------------------------
db
monday
db.Students.find().pretty()
{
  _id: ObjectId('67d9b946726d52f6470e5b76'),
  name: 'Shivani',
  location: 'Delhi'
}
-- db.Students.updateOne({name:'Shivani Kumari'}, {$set:{'name':'Shivam'})
-- SyntaxError: Unexpected token, expected "," (1:73)

-- [0m[31m[1m>[22m[39m[90m 1 |[39m db[33m.[39m[33mStudents[39m[33m.[39mupdateOne({name[33m:[39m[32m'Shubham Raj Sharma'[39m}[33m,[39m {$set[33m:[39m{[32m'name'[39m[33m:[39m[32m'Shubh'[39m})
--  [90m   |[39m                                                                          [31m[1m^[22m[39m[0m
-- db.Students.updateOne({'name':'Shivani Kumari'}, {$set:{'name':'Shivam'})
-- SyntaxError: Unexpected token, expected "," (1:75)

-- [0m[31m[1m>[22m[39m[90m 1 |[39m db[33m.[39m[33mStudents[39m[33m.[39mupdateOne({[32m'name'[39m[33m:[39m[32m'Shubham Raj Sharma'[39m}[33m,[39m {$set[33m:[39m{[32m'name'[39m[33m:[39m[32m'Shubh'[39m})
--  [90m   |[39m                                                                            [31m[1m^[22m[39m[0m
-- db.Students.updateOne({'name':'Shivani Kumari'} {$set:{'name':'Shivam'})
-- SyntaxError: Unexpected token, expected "," (1:52)

-- [0m[31m[1m>[22m[39m[90m 1 |[39m db[33m.[39m[33mStudents[39m[33m.[39mupdateOne({[32m'name'[39m[33m:[39m[32m'Shubham Raj Sharma'[39m} {$set[33m:[39m{[32m'name'[39m[33m:[39m[32m'Shubh'[39m})
--  [90m   |[39m                                                     [31m[1m^[22m[39m[0m
-- db.Students.updateOne({'name':'Shivani Kumari'},{$set:{'name':'Shivam'})
-- SyntaxError: Unexpected token, expected "," (1:74)

-- [0m[31m[1m>[22m[39m[90m 1 |[39m db[33m.[39m[33mStudents[39m[33m.[39mupdateOne({[32m'name'[39m[33m:[39m[32m'Shubham Raj Sharma'[39m}[33m,[39m{$set[33m:[39m{[32m'name'[39m[33m:[39m[32m'Shubh'[39m})
--  [90m   |[39m                                                                           [31m[1m^[22m[39m[0m
-- db.Students.updateOne({name:'Shivani Kumari'},{$set:{'name':'Shivam'})
-- SyntaxError: Unexpected token, expected "," (1:72)

-- [0m[31m[1m>[22m[39m[90m 1 |[39m db[33m.[39m[33mStudents[39m[33m.[39mupdateOne({name[33m:[39m[32m'Shubham Raj Sharma'[39m}[33m,[39m{$set[33m:[39m{[32m'name'[39m[33m:[39m[32m'Shubh'[39m})
--  [90m   |[39m                                                                         [31m[1m^[22m[39m[0m
db.Students.updateOne({name:'Shivani Kumari'},{$set:{'name':'Shivam'}})
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
db.Students.find()
{
  _id: ObjectId('67d9b946726d52f6470e5b76'),
  name: 'Shivam',
  location: 'Delhi'
}
db.Students.insertOne({})
{
  acknowledged: true,
  insertedId: ObjectId('67d9c0124528fa06b04ca584')
}
db.Students.insertOne({
-id :1,
name: "Joy"});
-- SyntaxError: Unexpected token (2:0)

-- [0m [90m 1 |[39m db[33m.[39m[33mStudents[39m[33m.[39minsertOne({
-- [31m[1m>[22m[39m[90m 2 |[39m [33m-[39mid [33m:[39m[35m1[39m[33m,[39m
--  [90m   |[39m [31m[1m^[22m[39m
--  [90m 3 |[39m name[33m:[39m [32m"Joy"[39m})[33m;[39m[0m
db.Students.insertOne({
_id :1,
name: "Joy"});
{
  acknowledged: true,
  insertedId: 1
}
db.Students.find()
{
  _id: ObjectId('67d9b946726d52f6470e5b76'),
  name: 'Shivam',
  location: 'Delhi'
}
{
  _id: ObjectId('67d9c0124528fa06b04ca584')
}
{
  _id: 1,
  name: 'Joy'
}
db.Students.insertOne({
_id :null,
name: "Ujjwal"});
{
  acknowledged: true,
  insertedId: ObjectId('67d9c0bd4528fa06b04ca585')
}
db.Students.insertOne({
_id :null,
name: "Shivani"});
{
  acknowledged: true,
  insertedId: ObjectId('67d9c0c34528fa06b04ca586')
}
db.Students.find()
{
  _id: ObjectId('67d9b946726d52f6470e5b76'),
  name: 'Shivani',
  location: 'Delhi
}
{
  _id: ObjectId('67d9c0124528fa06b04ca584')
}
{
  _id: 1,
  name: 'Joy'
}
{
  _id: ObjectId('67d9c0bd4528fa06b04ca585'),
  name: 'Ujjwal'
}
{
  _id: ObjectId('67d9c0c34528fa06b04ca586'),
  name: 'Shubham'
}
db.Students.insertOne([
  {title:"NoSQL Distilled",isbn:"0-4696-7030-4"},
  {title:"NoSQL in 7 Days",isbn: "0-4086-6859-8"},
  {title:"NoSQL Database",isbn:"0-2504-6932-4"}]);
{
  acknowledged: true,
  insertedId: ObjectId('67d9c1a24528fa06b04ca587')
}
db.Students.drop()
true
db.Books.insertMany([
  {title:"NoSQL Distilled",isbn:"0-4696-7030-4"},
  {title:"NoSQL in 7 Days",isbn: "0-4086-6859-8"},
  {title:"NoSQL Database",isbn:"0-2504-6932-4"}]);
{
  acknowledged: true,
  insertedIds: {
    '0': ObjectId('67d9c1d44528fa06b04ca588'),
    '1': ObjectId('67d9c1d44528fa06b04ca589'),
    '2': ObjectId('67d9c1d44528fa06b04ca58a')
  }
}
db.Books.find()
{
  _id: ObjectId('67d9c1d44528fa06b04ca588'),
  title: 'NoSQL Distilled',
  isbn: '0-4696-7030-4'
}
{
  _id: ObjectId('67d9c1d44528fa06b04ca589'),
  title: 'NoSQL in 7 Days',
  isbn: '0-4086-6859-8'
}
{
  _id: ObjectId('67d9c1d44528fa06b04ca58a'),
  title: 'NoSQL Database',
  isbn: '0-2504-6932-4'
}
db.Books.drop()
true
db.Books.insertOne([
  {title:"NoSQL Distilled",isbn:"0-4696-7030-4"},
  {title:"NoSQL in 7 Days",isbn: "0-4086-6859-8"},
  {title:"NoSQL Database",isbn:"0-2504-6932-4"}]);
{
  acknowledged: true,
  insertedId: ObjectId('67d9c2074528fa06b04ca58b')
}
db.Books.find()
{
  '0': {
    title: 'NoSQL Distilled',
    isbn: '0-4696-7030-4'
  },
  '1': {
    title: 'NoSQL in 7 Days',
    isbn: '0-4086-6859-8'
  },
  '2': {
    title: 'NoSQL Database',
    isbn: '0-2504-6932-4'
  },
  _id: ObjectId('67d9c2074528fa06b04ca58b')
}
monday
----------------------------------------------------------------------------------------------------------------
                                                                

